------------------------------------------------------------------------
20130921 エラー処理どうするか

IOの層で対応できていれば、その下ではバグ以外のエラーはないはず。
でもIOをいくつか書くとすれば、バグが入り込む余地はかなりある。
assertか何かでエラーチェックを入れておきたい。
それか、ErrorTでエラーの層も入れておくか

エラーが入る可能性があるところ
存在しないカードへのコマンド入力
カードが実行可能でないコマンド入力
など

テストを入れる。
QuickCheck?
HUnit?
hspec?

スピードは気にすることないはずなので、エラーの層を入れるか。
各関数でチェックするのは面倒なので、入力のあとにチェック処理を入れればいいか。


-------------------------------------------------------------------------------
20130921 

魔法の消費mpをどうするか。
普通のゲームではどうなってるか?
魔法にレベルがあって、レベルごとに消費mp, 効果が決まっていたり?
消費mp, 効果が固定で何段階か似たような魔法があったり。
レベル面倒なので、固定値でやってみる。
魔法は消費mpを決める必要がある
消費mpを取得する関数か何かがあればいいか

あと、消費mpが足りないとき使えないので
使えるかどうか判定する関数も必要か

プレイヤーのコマンドを受け取ったときに、実行可能かどうか返す
canPeform


-----------------------------------------------------------------------------------


関数から名前を取得するのは難しい。

名前 -> 関数 のマップ
を作っておいて

名前を記録するようにすれば処理を再現できる?
引数の取得手段も必要そう

どのプレイヤーが、どのカードで、どの敵プレイヤーの、どのカードを、どうした

攻撃なら、攻撃対象があるが、防御ならない
Actionの方に入れればよい?

PlayerTag CardTag 

BattleLog {player :: PlayerTag, card :: CardTag, action :: Action}

replayStep :: BattleLog -> BattleState -> BattleState

execAction

===
まとまらない


ログはコマンドを記録すればよいはず
状態はコマンド通り実行すれば同じ推移

状態は、変化するのとしないのでわけた方がいい?
まあ、後でもいい。
プレイヤーから、いじれるわけではない。
バグが入るかもしれないというのはある。

単純でいいので細かいルールを決める

===
1対1のバトル

何枚かのカードを持って、戦わせる。
カードの枚数をどうするか。
適当に上限決めて、Listに入れる
Maybeとかで一部カードなしも可能。
カード0枚はダメ。

カードのプロパティ
maxHp
attack
defense
speed


アクション
- 攻撃
相手のhpを減らす
とりあえず
相手のHP -= 攻撃力 - 防御力

- 防御
防御力が増える?
意味ないのでは?
1対1では意味ない。
回復できる状況などでは、たまに意味あるか。
攻撃よりも速くできないと、まったく意味ない。

- ブースト
ステータスが増える
防御力、スピード、攻撃力
実装的には、ブースト分を持つフィールドを作って
足して使う。
何ターンで消えるなども必要。
防御もこれの一種か。

- 魔法
MPを消費する。効果は色々。
とりあえず回復だけ。
回復量は固定で。


====
ターンの処理の流れ
コマンドを受け取る, コマンドのリストでいいか
コマンドを実行順にソートする
ログを残しつつ、コマンド実行し、状態更新
結果返す


PlayerCommand
BattleCommandをOrdにすればソートできるか

===
カードは、位置をキーにしたマップで持てばいいか。

data CardPosition = Card1 | Card2 | Card3 | Card4 | Card5 deriving (Show, Eq, Ord, Enum)

Map CardPosition Card














